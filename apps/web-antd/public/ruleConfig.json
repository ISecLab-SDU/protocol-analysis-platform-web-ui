{
  "CONNECT": [
      {
          "rule": "If a CONNECT packet is received with Clean Start set to 1, the Client and Server must discard any existing Session and start a new Session.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Clean Start"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "All fields except the Client identifier can be omitted, and the presence of the other fields is determined by flags in the Variable Header.",
          "req_type": "CONNECT",
          "req_fields": [
              "Client Identifier",
              "Variable Header"
          ],
          "res_type": "CONNACK",
          "res_fields": []
      },
      {
          "rule": "The Server must validate that the reserved flag in the CONNECT packet is set to 0.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "reserved flag"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Protocol Version is not 5 and the Server does not accept the CONNECT packet, the Server MAY send a CONNACK packet with Reason Code 0x84 (Unsupported Protocol Version) and then MUST close the Network Connection.",
          "req_type": "CONNECT",
          "req_fields": [
              "Variable Header",
              "Protocol Version"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "If a CONNECT packet is received with Clean Start set to 0 and there is no Session associated with the Client Identifier, the Server MUST create a new Session.",
          "req_type": "CONNECT",
          "req_fields": [
              "Variable Header",
              "Connect Flags",
              "Clean Start"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "After a network connection is established by a client to a server, the first packet sent from the client to the server must be a CONNECT packet.",
          "req_type": "CONNECT",
          "req_fields": [],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Server does not accept the CONNECT and wishes to indicate that it is an MQTT Server, it may send a CONNACK packet with a Reason Code of 0x84 (Unsupported Protocol Version), and then it must close the Network Connection.",
          "req_type": "CONNECT",
          "req_fields": [],
          "res_type": "CONNACK",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "If the Will Flag is set to 1 and the Will Retain is set to 0, the Server must publish the Will Message as a non-retained message.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Will Flag",
              "Will Retain",
              "Will Message"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Will Flag is set to 1 and the Will Retain is set to 1, the Server must publish the Will Message as a retained message.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Will Flag",
              "Will Retain"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Session Present flag in the CONNACK packet is always set to 0 when the Clean Start flag is set to 1.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Clean Start"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Connect Acknowledge Flags",
              "Session Present"
          ]
      },
      {
          "rule": "If the User Name Flag is set to 0, a User Name must not be present in the Payload.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "UserName"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Password Flag is set to 0, a Password MUST NOT be present in the Payload.",
          "req_type": "CONNECT",
          "req_fields": [
              "Password Flag",
              "Password",
              "Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Password Flag is set to 1, a Password MUST be present in the Payload.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Password Flag",
              "Payload",
              "Password"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A Keep Alive value of 0 disables the Keep Alive mechanism.",
          "req_type": "CONNECT",
          "req_fields": [
              "Keep Alive"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Receive Maximum value is absent, the Receive Maximum value defaults to 65,535.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Receive Maximum"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Will Flag is set to 1, the Will Properties, Will Topic, and Will Payload fields must be present in the Payload.",
          "req_type": "CONNECT",
          "req_fields": [
              "Will Flag",
              "Payload",
              "Will Properties",
              "Will Topic",
              "Will Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "It is a Protocol Error to include the Request Response Information more than once or to set its value to anything other than 0 or 1.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Request Response Information"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the User Name Flag is set to 1, a User Name must be present in the Payload.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "User Name Flag",
              "User Name"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "Including the Maximum Packet Size more than once or setting the value to zero is a Protocol Error.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Maximum Packet Size"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "If the Topic Alias Maximum value is absent or zero, the Server must not send any Topic Aliases to the Client.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Topic Alias Maximum"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "Properties",
              "Topic Alias"
          ]
      },
      {
          "rule": "Including Request Problem Information more than once, or having a value other than 0 or 1, is a Protocol Error.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Request Problem Information"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Client uses the Request Problem Information value to determine whether the Reason String or User Properties are included in failure responses.",
          "req_type": "CONNECT",
          "req_fields": [
              "properties.RequestProblemInformation",
              "properties"
          ],
          "res_type": "",
          "res_fields": [
              "properties.ReasonString",
              "properties.UserProperties",
              "properties"
          ]
      },
      {
          "rule": "A Server MAY allow a Client to supply a ClientID that has a length of zero bytes, however if it does so the Server MUST treat this as a special case and assign a unique ClientID to that Client.",
          "req_type": "CONNECT",
          "req_fields": [
              "Payload",
              "ClientID"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "AssignedClientIdentifier"
          ]
      },
      {
          "rule": "The Payload Format Indicator value of 0 (0x00) indicates that the Will Message consists of unspecified bytes, which is equivalent to omitting the Payload Format Indicator.",
          "req_type": "CONNECT",
          "req_fields": [
              "Payload Format Indicator",
              "Will Message",
              "Will Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The server MUST process the CONNECT packet as if the Client had provided a unique ClientID and MUST return the Assigned Client Identifier in the CONNACK packet.",
          "req_type": "CONNECT",
          "req_fields": [
              "Payload",
              "ClientID"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "Assigned Client Identifier"
          ]
      },
      {
          "rule": "If the Server rejects the ClientID, it MAY respond to the CONNECT packet with a CONNACK using Reason Code 0x85 (Client Identifier not valid) and then it MUST close the Network Connection.",
          "req_type": "CONNECT",
          "req_fields": [
              "Payload",
              "ClientID"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "If the Session Expiry Interval is absent, the value 0 is used.",
          "req_type": "CONNECT",
          "req_fields": [
              "properties",
              "Session Expiry Interval"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The length-prefixed fields, if present, must appear in the order Client Identifier, Will Properties, Will Topic, Will Payload, User Name, Password.",
          "req_type": "CONNECT",
          "req_fields": [
              "Client Identifier",
              "Will",
              "Will Properties",
              "Will Topic",
              "Will Payload",
              "User Name",
              "Password"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Session Expiry Interval is set to 0 or is absent, the Session ends when the Network Connection is closed.",
          "req_type": "CONNECT",
          "req_fields": [
              "SessionExpiryInterval"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Will Delay Interval is absent, the default value is 0 and there is no delay before the Will Message is published.",
          "req_type": "CONNECT",
          "req_fields": [
              "Will Delay Interval",
              "Will Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the value of Request Problem Information is 0, the Server MAY include a Reason String or User Properties in a CONNACK or DISCONNECT packet, but MUST NOT include a Reason String or User Properties in any packet other than PUBLISH, CONNACK, or DISCONNECT.",
          "req_type": "CONNECT",
          "req_fields": [
              "Request Problem Information",
              "properties"
          ],
          "res_type": "",
          "res_fields": [
              "Reason String",
              "User Properties",
              "properties"
          ]
      },
      {
          "rule": "If the Topic Alias Maximum property is absent, the default value is 0.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Topic Alias Maximum"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Password Flag is set to 1, the Password is the next field in the Payload.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Password Flag",
              "Payload",
              "Password"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Message Expiry Interval is absent, the Server does not include it when publishing the Will Message.",
          "req_type": "CONNECT",
          "req_fields": [
              "Will Properties",
              "Message Expiry Interval"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "Properties",
              "Message Expiry Interval"
          ]
      },
      {
          "rule": "If the Will Flag is set to 1, the Will Topic must be included as the next field in the Payload.",
          "req_type": "CONNECT",
          "req_fields": [
              "Will Flag",
              "Connect Flags",
              "Variable Header",
              "Will Topic",
              "Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Server accepts a connection with Clean Start set to 0 and the Server has Session State for the ClientID, the Server MUST set Session Present to 1 in the CONNACK packet; otherwise, the Server MUST set Session Present to 0 in the CONNACK packet.",
          "req_type": "CONNECT",
          "req_fields": [
              "Clean Start",
              "Connect Flags"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Session Present"
          ]
      },
      {
          "rule": "If the checks succeed, the Server sends a CONNACK packet with a Reason Code of 0x00 (Success).",
          "req_type": "CONNECT",
          "req_fields": [],
          "res_type": "CONNACK",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "The Payload of the CONNECT packet contains one or more length-prefixed fields, whose presence is determined by the flags in the Variable Header.",
          "req_type": "CONNECT",
          "req_fields": [
              "Payload",
              "Variable Header",
              "Connect Flags"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Session Expiry Interval is set to 0xFFFFFFFF, the Session does not expire.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Session Expiry Interval"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "Including Retain Available more than once or using a value other than 0 or 1 is a Protocol Error.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Retain Available"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Receive Maximum value is absent, the Receive Maximum value defaults to 65,535.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Receive Maximum"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a Server receives a CONNECT packet with a Will Message where the Will Retain flag is set to 1, and the Server does not support retained messages, the Server MUST reject the connection request.",
          "req_type": "CONNECT",
          "req_fields": [
              "Will Message",
              "Will Retain Flag"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a well-formed CONNECT packet is received by the Server, but the Server is unable to complete the Connection, the Server MAY send a CONNACK packet containing the appropriate Connect Reason code.",
          "req_type": "CONNECT",
          "req_fields": [],
          "res_type": "CONNACK",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "If the Maximum QoS is absent, the Client uses a Maximum QoS of 2.",
          "req_type": "CONNECT",
          "req_fields": [
              "properties",
              "Maximum QoS"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "Including Maximum QoS more than once, or having a value other than 0 or 1, is a Protocol Error.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Maximum QoS"
          ],
          "res_type": "CONNACK",
          "res_fields": []
      },
      {
          "rule": "If the Server rejects the CONNECT, the Server MUST NOT process any data sent by the Client after the CONNECT packet except AUTH packets.",
          "req_type": "CONNECT",
          "req_fields": [],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Server must acknowledge the CONNECT packet with a CONNACK packet containing a 0x00 (Success) Reason Code.",
          "req_type": "CONNECT",
          "req_fields": [],
          "res_type": "CONNACK",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "The Server SHOULD send a CONNACK packet with the Reason Code 0x9A (Retain not supported) and then MUST close the Network Connection.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Will Retain"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "If the Maximum Packet Size is not present, there is no limit on the packet size beyond the constraints imposed by the remaining length encoding and the protocol header sizes.",
          "req_type": "CONNECT",
          "req_fields": [
              "properties",
              "Maximum Packet Size"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a Server receives a CONNECT packet with a Will QoS that exceeds the Server's capabilities, the Server MUST reject the connection.",
          "req_type": "CONNECT",
          "req_fields": [
              "Connect Flags",
              "Will QoS"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "The Server MUST NOT send the Reason String if the Reason String would increase the size of the CONNACK packet beyond the Maximum Packet Size specified by the Client.",
          "req_type": "CONNECT",
          "req_fields": [
              "Maximum Packet Size"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Reason String",
              "Properties"
          ]
      },
      {
          "rule": "The Server MUST NOT include the User Property in the CONNACK packet if it would cause the packet size to exceed the Maximum Packet Size specified by the Client.",
          "req_type": "CONNECT",
          "req_fields": [
              "Maximum Packet Size"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "User Property"
          ]
      },
      {
          "rule": "If the Server accepts a connection with Clean Start set to 1, the Server MUST set Session Present to 0 in the CONNACK packet and include a 0x00 (Success) Reason Code in the CONNACK packet.",
          "req_type": "CONNECT",
          "req_fields": [
              "Clean Start",
              "Connect Flags"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Session Present",
              "Connect Acknowledge Flags",
              "Reason Code"
          ]
      },
      {
          "rule": "It is a Protocol Error to include the Wildcard Subscription Available Byte field more than once or to send a value other than 0 or 1.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Wildcard Subscription Available"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a Server does not support QoS 1 or QoS 2 PUBLISH packets, the Server MUST send a Maximum QoS in the CONNACK packet specifying the highest QoS it supports.",
          "req_type": "CONNECT",
          "req_fields": [],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "Maximum QoS"
          ]
      },
      {
          "rule": "If the Client connects using a zero-length Client Identifier, the Server must respond with a CONNACK containing an Assigned Client Identifier.",
          "req_type": "CONNECT",
          "req_fields": [
              "Client Identifier"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "Assigned Client Identifier"
          ]
      },
      {
          "rule": "If the Topic Alias Maximum property is not present, its default value is 0.",
          "req_type": "CONNECT",
          "req_fields": [
              "properties",
              "Topic Alias Maximum"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A Topic Alias Maximum value of 0 indicates that the Server does not accept any Topic Aliases on this connection.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Topic Alias Maximum"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Client sends a Request Response Information with a value of 1, the Server may optionally include the Response Information in the CONNACK.",
          "req_type": "CONNECT",
          "req_fields": [
              "Properties",
              "Request Response Information"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "Response Information"
          ]
      },
      {
          "rule": "If the Server does not send the Server Keep Alive, the Server must use the Keep Alive value set by the Client on CONNECT.",
          "req_type": "CONNECT",
          "req_fields": [
              "Keep Alive"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Server Keep Alive"
          ]
      },
      {
          "rule": "If the Remaining Length is less than 4, the Property Length is not present and is considered to be 0.",
          "req_type": "CONNECT",
          "req_fields": [
              "Remaining Length",
              "Properties",
              "Property Length"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Remaining Length is less than 4, there is no Property Length and the value of 0 is used.",
          "req_type": "CONNECT",
          "req_fields": [
              "Remaining Length",
              "Fixed Header",
              "Property Length",
              "Properties",
              "Variable Header"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Remaining Length is less than 4, there is no Property Length and the value of 0 is used.",
          "req_type": "CONNECT",
          "req_fields": [
              "Fixed Header",
              "Remaining Length",
              "Properties",
              "Property Length"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "It is a Protocol Error to omit the Authentication Method or to include the Authentication Method more than once.",
          "req_type": "CONNECT",
          "req_fields": [
              "properties",
              "authentication method"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Server does not support the Authentication Method supplied by the Client, the Server MAY send a CONNACK with a Reason Code of 0x8C (Bad authentication method) or 0x87 (Not Authorized) and MUST close the Network Connection.",
          "req_type": "CONNECT",
          "req_fields": [
              "properties",
              "authenticationMethod"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "reasonCode"
          ]
      },
      {
          "rule": "If the Client does not include an Authentication Method in the CONNECT packet, the Server must not send an AUTH packet, and the Server must not send an Authentication Method in the CONNACK packet.",
          "req_type": "CONNECT",
          "req_fields": [
              "Authentication Method"
          ],
          "res_type": "",
          "res_fields": [
              "Authentication Method"
          ]
      }
  ],
  "PUBLISH": [
      {
          "rule": "A PUBLISH packet must not include a Packet Identifier if its QoS value is 0.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Packet Identifier",
              "QoS",
              "Fixed Header",
              "Variable Header"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A PUBACK, PUBREC, PUBREL, or PUBCOMP packet must contain the same Packet Identifier as the PUBLISH packet that was originally sent.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      },
      {
          "rule": "It is a Protocol Error to include the Payload Format Indicator more than once.",
          "req_type": "PUBLISH",
          "req_fields": [
              "properties",
              "Payload Format Indicator"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A Client MUST NOT send PUBLISH packets at a QoS level exceeding the Maximum QoS level specified by the Server.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "QoS"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "Receiving a PUBLISH packet with a QoS higher than the specified Maximum QoS is a Protocol Error for the Server.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "QoS"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Server receives a PUBLISH packet with the RETAIN flag set to 1 and Retain Available is set to 0, it is a Protocol Error.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "RETAIN"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The DUP flag must be set to 1 by the Client or Server when attempting to re-deliver a PUBLISH packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "DUP"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Client must not send a Topic Alias in a PUBLISH packet to the Server that exceeds the Topic Alias Maximum value.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Topic Alias"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a Server or Client receives a PUBLISH packet with both QoS bits set to 1, the packet is a Malformed Packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "QoS"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the RETAIN flag is set to 1 in a PUBLISH packet sent by a Client to a Server, the Server must replace any existing retained message for this topic and store the Application Message, so that the Application Message can be delivered to future subscribers whose subscriptions match the topic's Topic Name.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "RETAIN Flag"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the RETAIN flag is 0 in a PUBLISH packet sent by a Client to a Server, the Server must not store the message as a retained message and must not remove or replace any existing retained message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "Retain Flag"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Payload contains zero bytes, the Payload is processed normally by the Server, but any retained message with the same topic name must be removed, and any future subscribers for the topic will not receive a retained message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Payload",
              "Retain Flag",
              "Topic Name",
              "Fixed Header"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The DUP flag from an incoming PUBLISH packet is not propagated when the Server sends the PUBLISH packet to subscribers.",
          "req_type": "PUBLISH",
          "req_fields": [
              "DUP",
              "Fixed Header"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "DUP",
              "Fixed Header"
          ]
      },
      {
          "rule": "A retained message with a payload containing zero bytes must not be stored as a retained message on the server.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "Retain Flag",
              "Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Server included a Maximum QoS in its CONNACK response to a Client and the Server receives a PUBLISH packet with a QoS greater than the Maximum QoS, then the Server must disconnect with Reason Code 0x9B (QoS not supported) as described in section 4.13 Handling errors.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "QoS"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "If the Server indicates Retain Available as 0 in its CONNACK response and receives a PUBLISH packet with the RETAIN flag set to 1, the Server must disconnect the Client with the Reason Code 0x9A (Retain not supported) as specified in section 4.13.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "RETAIN flag"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "A Protocol Error occurs if the Topic Name has a length of zero and no Topic Alias is present.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Topic Name",
              "Topic Alias",
              "Properties"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "Reason Code",
              "Properties"
          ]
      },
      {
          "rule": "If the Retain As Published subscription option is set to 1, the Server must set the RETAIN flag to match the RETAIN flag in the received PUBLISH packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "RETAIN"
          ],
          "res_type": "",
          "res_fields": [
              "RETAIN"
          ]
      },
      {
          "rule": "The Server must send all User Properties unaltered in a PUBLISH packet when forwarding the Application Message to a Client.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "User Property"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Retain As Published subscription option is set to 0, the Server must set the RETAIN flag to 0 when forwarding an Application Message, regardless of the RETAIN flag setting in the received PUBLISH packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "RETAIN"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "RETAIN"
          ]
      },
      {
          "rule": "The Packet Identifier field is present in PUBLISH packets only when the QoS level is 1 or 2.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "QoS",
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Server receives a PUBLISH packet with the RETAIN flag set to 1 and QoS 0, the Server SHOULD store the new QoS 0 message as the new retained message for that topic, but MAY choose to discard the message at any time.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "Retain Flag",
              "QoS"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Server must send the Response Topic unaltered to all subscribers receiving the Application Message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Response Topic"
          ],
          "res_type": "",
          "res_fields": [
              "Properties",
              "Response Topic"
          ]
      },
      {
          "rule": "If the Request Message contains Correlation Data, the receiver of the Request Message must include the Correlation Data as a property in the PUBLISH packet of the Response Message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Correlation Data"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "Properties",
              "Correlation Data"
          ]
      },
      {
          "rule": "A Client must not send a PUBLISH packet with a Topic Alias greater than the Topic Alias Maximum value returned by the Server in the CONNACK packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Topic Alias"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "Topic Alias Maximum"
          ]
      },
      {
          "rule": "The receiver processes the PUBLISH message as usual and establishes the specified Topic Alias mapping to the corresponding Topic Name.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Topic Name",
              "Properties",
              "Topic Alias"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The length of the Payload is determined by subtracting the length of the Variable Header from the Remaining Length field in the Fixed Header.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "Fixed Header.Remaining Length",
              "Variable Header"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The sender establishes a Topic Alias mapping by including a non-zero length Topic Name and a Topic Alias in the PUBLISH packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Topic Name",
              "Properties",
              "Topic Alias"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A Server must send the Payload Format Indicator unaltered to all subscribers receiving the Application Message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Payload Format Indicator"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A PUBLISH packet may contain a payload with a length of zero.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A Server must accept all Topic Alias values greater than 0 and less than or equal to the Topic Alias Maximum value that it returned in the CONNACK packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Topic Alias"
          ],
          "res_type": "CONNACK",
          "res_fields": [
              "Properties",
              "Topic Alias Maximum"
          ]
      },
      {
          "rule": "The PUBACK packet is sent by the server in response to a PUBLISH packet with QoS level 1, indicating that the message has been received.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "QoS"
          ],
          "res_type": "PUBACK",
          "res_fields": []
      },
      {
          "rule": "The receiver of an Application Message that includes a Response Topic and Correlation Data must send a response by using the Response Topic as the Topic Name of a PUBLISH.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Response Topic",
              "Correlation Data"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "Variable Header",
              "Topic Name"
          ]
      },
      {
          "rule": "If the Remaining Length is less than 4, there is no Property Length and the value of 0 is used.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Remaining Length",
              "Property Length",
              "Fixed Header",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the PUBLISH packet contains a Topic Alias, the receiver processes it as follows: if the Topic Alias value is 0 or greater than the Maximum Topic Alias, it is a Protocol Error, and the receiver must use DISCONNECT with a Reason Code of 0x94 (Topic Alias invalid) as described in section 4.13.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Topic Alias"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "If the packet contains a Topic Name with a non-zero length, the receiver processes the packet using that Topic Name and sets its mappings for the Topic Alias to Topic Name from the incoming packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Topic Name",
              "Properties",
              "Topic Alias"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "In the QoS 0 delivery protocol, the receiver accepts ownership of the message upon receiving the PUBLISH packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "QoS"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A QoS 1 PUBLISH packet includes a Packet Identifier in its Variable Header and is acknowledged by a PUBACK packet.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "PUBACK",
          "res_fields": []
      },
      {
          "rule": "The sender must treat the PUBLISH packet as unacknowledged until the sender receives the corresponding PUBACK packet from the receiver.",
          "req_type": "PUBLISH",
          "req_fields": [],
          "res_type": "PUBACK",
          "res_fields": []
      },
      {
          "rule": "In the QoS 1 delivery protocol, the receiver must respond with a PUBACK packet containing the Packet Identifier from the incoming PUBLISH packet, having accepted ownership of the Application Message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "PUBACK",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      },
      {
          "rule": "The receiver indicates success or failure using the appropriate Reason Code in the PUBREC packet.",
          "req_type": "PUBLISH",
          "req_fields": [],
          "res_type": "PUBREC",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "The wildcard characters can be used in Topic Filters but must not be used within a Topic Name.",
          "req_type": "PUBLISH",
          "req_fields": [
              "subscriptions",
              "topicFilter",
              "topicName"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "reasonCode"
          ]
      },
      {
          "rule": "The sender MUST send a PUBLISH packet containing this Packet Identifier with QoS 2 and DUP flag set to 0.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Packet Identifier",
              "QoS",
              "DUP",
              "Variable Header",
              "Fixed Header"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The sender MUST treat the PUBLISH packet as unacknowledged until the sender has received the corresponding PUBREC packet from the receiver.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "PUBREC",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      },
      {
          "rule": "In the QoS 2 delivery protocol, the receiver must respond with a PUBREC containing the Packet Identifier from the incoming PUBLISH packet, having accepted ownership of the Application Message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "PUBREC",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      },
      {
          "rule": "After the receiver has sent a PUBACK packet, the receiver must treat any incoming PUBLISH packet with the same Packet Identifier as a new Application Message, regardless of the PUBLISH packet's DUP flag.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Fixed Header",
              "Variable Header",
              "DUP flag",
              "Packet Identifier"
          ],
          "res_type": "PUBACK",
          "res_fields": []
      },
      {
          "rule": "If a PUBACK or PUBREC packet is received with a Reason Code of 0x80 or greater, the corresponding PUBLISH packet is treated as acknowledged and must not be retransmitted.",
          "req_type": "PUBLISH",
          "req_fields": [],
          "res_type": "PUBACK, PUBREC",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "The MQTT Server forwards the Response Topic and Correlation Data Property from the Request Message and includes the Correlation Data in the Response Message.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Properties",
              "Response Topic",
              "Correlation Data"
          ],
          "res_type": "",
          "res_fields": [
              "Properties",
              "Correlation Data"
          ]
      },
      {
          "rule": "The receiver of a QoS 2 PUBLISH packet acknowledges receipt through a two-step acknowledgement process.",
          "req_type": "PUBLISH",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      },
      {
          "rule": "If a Client responds with a PUBACK or PUBREC containing a Reason Code of 0x80 or greater to a PUBLISH packet from the Server, the Server must discard the Application Message and not attempt to send it to any other Subscriber.",
          "req_type": "PUBLISH",
          "req_fields": [],
          "res_type": "PUBACK, PUBREC",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      }
  ],
  "UNKNOWN": [
      {
          "rule": "Reason Codes with values less than 0x80 indicate successful completion of an operation.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "",
          "res_fields": [
              "variable_header",
              "reason_code"
          ]
      },
      {
          "rule": "Reason Code values of 0x80 or greater indicate failure.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "",
          "res_fields": [
              "reason_code"
          ]
      },
      {
          "rule": "If there are no properties, the absence of properties must be indicated by including a Property Length of zero.",
          "req_type": "UNKNOWN",
          "req_fields": [
              "Variable Header",
              "Property Length"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a Server sends a CONNACK packet with a non-zero Reason Code, the Server must set Session Present to 0.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "CONNACK",
          "res_fields": [
              "Connect Acknowledge Flags",
              "Session Present",
              "Reason Code"
          ]
      },
      {
          "rule": "The Server or Client must use DISCONNECT with Reason Code 0x81 (Malformed Packet) as described in section 4.13.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "DISCONNECT",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "The PUBACK packet does not include a Payload.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "PUBACK",
          "res_fields": [
              "Payload"
          ]
      },
      {
          "rule": "The PUBACK packet Fixed Header includes a Remaining Length field, which is the length of the Variable Header, encoded as a Variable Byte Integer.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "PUBACK",
          "res_fields": [
              "Fixed Header",
              "Remaining Length"
          ]
      },
      {
          "rule": "If the Remaining Length is 2, then the Publish Reason Code is 0x00 (Success).",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "PUBREC",
          "res_fields": [
              "Fixed Header",
              "Remaining Length",
              "Variable Header",
              "Publish Reason Code"
          ]
      },
      {
          "rule": "The Reason Code and Property Length can be omitted if the Reason Code is 0x00 (Success) and there are no Properties.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "PUBACK",
          "res_fields": [
              "Reason Code",
              "Property Length",
              "Properties"
          ]
      },
      {
          "rule": "If the Reason Code is 0x00 (Success) and there are no Properties, the PUBACK packet has a Remaining Length of 2.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "PUBACK",
          "res_fields": [
              "Fixed Header",
              "Remaining Length",
              "Variable Header",
              "Reason Code",
              "Properties"
          ]
      },
      {
          "rule": "If the Remaining Length is 2, then there is no Reason Code and the value of 0x00 (Success) is used.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "PUBACK",
          "res_fields": [
              "Fixed Header",
              "Remaining Length",
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "1. If the receiver has already established a mapping for the Topic Alias:  \n   a) If the packet has a zero-length Topic Name, the receiver processes it using the Topic Name that corresponds to the Topic Alias.  \n   b) If the packet contains a non-zero-length Topic Name, the receiver processes the packet using that Topic Name and updates its mapping for the Topic Alias to the Topic Name from the incoming packet.  \n\n2. If the receiver does not already have a mapping for this Topic Alias:  \n   a) If the packet has a zero-length Topic Name field, it is a Protocol Error, and the receiver uses DISCONNECT with Reason Code 0x82 (Protocol Error) as described in section 4.13.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Packet Identifier becomes available for reuse once the sender has received the PUBCOMP packet or a PUBREC packet with a Reason Code of 0x80 or greater.",
          "req_type": "UNKNOWN",
          "req_fields": [
              "Packet Identifier"
          ],
          "res_type": "",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "The send quota is increased by 1 each time a PUBACK or PUBCOMP packet is received, regardless of whether the PUBACK or PUBCOMP contains an error code.",
          "req_type": "UNKNOWN",
          "req_fields": [],
          "res_type": "PUBACK, PUBCOMP",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "If a Reason Code of 0x80 or greater is specified, the Network Connection must be closed regardless of whether the CONNACK or DISCONNECT is sent.",
          "req_type": "UNKNOWN",
          "req_fields": [
              "Variable Header",
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      }
  ],
  "DISCONNECT": [
      {
          "rule": "The Will Message must be removed from the stored Session State in the Server once it has been published or the Server has received a DISCONNECT packet with a Reason Code of 0x00 (Normal disconnection) from the Client.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Client or Server MUST validate that reserved bits are set to 0 in the DISCONNECT packet Fixed Header.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Fixed Header",
              "Reserved Bits"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the reserved bits are not zero, the Client or Server sends a DISCONNECT packet with a Reason code of 0x81 (Malformed Packet).",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Fixed Header",
              "Flags"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      },
      {
          "rule": "The Client or Server sending the DISCONNECT packet must use one of the DISCONNECT Reason Code values.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Variable Header",
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The DISCONNECT packet has a Remaining Length of 0.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Fixed Header",
              "Remaining Length"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Remaining Length is less than 1, the value of 0x00 (Normal disconnection) is used.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Fixed Header",
              "Remaining Length",
              "Variable Header",
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Reason Code and Property Length can be omitted if the Reason Code is 0x00 (Normal disconnection) and there are no Properties.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "reason code",
              "property length",
              "properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "On receipt of DISCONNECT, the receiver SHOULD close the Network Connection.",
          "req_type": "DISCONNECT",
          "req_fields": [],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a non-zero Session Expiry Interval is received by the Server, the Server does not treat the packet as a valid DISCONNECT packet.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Variable Header",
              "Session Expiry Interval"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "On receipt of a DISCONNECT packet with a Reason Code of 0x00 (Success), the Server MUST discard any Will Message associated with the current Connection without publishing it.",
          "req_type": "DISCONNECT",
          "req_fields": [
              "Variable Header",
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      }
  ],
  "CONNACK": [
      {
          "rule": "Including the Maximum Packet Size more than once or setting the value to zero is a Protocol Error.",
          "req_type": "CONNACK",
          "req_fields": [
              "properties",
              "properties.maximum_packet_size"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "Including the Shared Subscription Available field more than once or sending a value other than 0 or 1 is a Protocol Error.",
          "req_type": "CONNACK",
          "req_fields": [
              "Properties",
              "Shared Subscription Available"
          ],
          "res_type": "",
          "res_fields": []
      }
  ],
  "SUBSCRIBE": [
      {
          "rule": "If the Server receives a SUBSCRIBE packet with a Wildcard Subscription and the Server does not support Wildcard Subscriptions, it is a Protocol Error.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "subscriptions",
              "subscriptions.topic_filter"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "reason_code"
          ]
      },
      {
          "rule": "If the Server receives a SUBSCRIBE packet with a Subscription Identifier and the Server does not support Subscription Identifiers, it is a Protocol Error.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Identifier",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "In the case of rejecting a subscribe request containing a Wildcard Subscription, the Server MAY send a SUBACK Control Packet with a Reason Code 0xA2 (Wildcard Subscriptions not supported).",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Payload",
              "Reason Codes"
          ]
      },
      {
          "rule": "If the Server receives a SUBSCRIBE packet with Shared Subscriptions and the Server does not support Shared Subscriptions, it is a Protocol Error.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filter"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "If Retain Handling is set to 2, the Server must not send the retained messages.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Retain Handling"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A Protocol Error occurs if the Subscription Identifier has a value of 0.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Properties",
              "Subscription Identifier"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If Retain Handling is set to 0, the Server MUST send the retained messages matching the Topic Filter of the subscription to the Client.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Retain Handling"
          ],
          "res_type": "PUBLISH",
          "res_fields": []
      },
      {
          "rule": "If the subscription is shared, only the Subscription Identifiers present in the SUBSCRIBE packet from the receiving Client are included in the PUBLISH packet.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Identifier",
              "Properties"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "Subscription Identifier",
              "Properties"
          ]
      },
      {
          "rule": "If the Client specified a Subscription Identifier for any of the overlapping subscriptions, the Server must include those Subscription Identifiers in the message published as a result of the subscriptions.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Subscription Identifier"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "Properties",
              "Subscription Identifier"
          ]
      },
      {
          "rule": "The Variable Header of the SUBSCRIBE Packet contains the Packet Identifier and Properties fields in the specified order.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Variable Header",
              "Packet Identifier",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A Protocol Error occurs if the Subscription Identifier has a value of 0.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Properties",
              "Subscription Identifier"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "Including the Subscription Identifier more than once results in a Protocol Error.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "properties",
              "Subscription Identifier"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The order of Reason Codes in the SUBACK packet must match the order of Topic Filters in the SUBSCRIBE packet.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Payload.Topic Filters"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Payload",
              "Payload.Reason Codes"
          ]
      },
      {
          "rule": "The Server sending a SUBACK packet must use one of the Subscribe Reason Codes for each Topic Filter received.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Payload",
              "Reason Codes"
          ]
      },
      {
          "rule": "If the Retain As Published option is set to 1, Application Messages forwarded using this subscription retain the RETAIN flag they were published with.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Retain As Published"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "A SUBSCRIBE packet must contain a Payload; otherwise, it is a Protocol Error.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Server MUST treat a SUBSCRIBE packet as malformed if any of the Reserved bits in the Payload are non-zero.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Payload.Subscription Options.Reserved Bits"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Retain As Published option is set to 0, Application Messages forwarded using this subscription have the RETAIN flag set to 0.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Retain As Published"
          ],
          "res_type": "",
          "res_fields": [
              "Fixed Header",
              "RETAIN flag"
          ]
      },
      {
          "rule": "Bits 3, 2, 1, and 0 of the Fixed Header of the SUBSCRIBE packet must be set to 0, 0, 1, and 0, respectively.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Fixed Header",
              "Fixed Header Bits 3-0"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "For a Server that indicates it does not support retained messages, all valid values of Retain As Published and Retain Handling result in no retained messages being sent at subscribe, and the RETAIN flag is set to 0 for all messages.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Retain As Published",
              "Retain Handling"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "RETAIN"
          ]
      },
      {
          "rule": "Retained messages sent when the subscription is established have the RETAIN flag set to 1.",
          "req_type": "SUBSCRIBE",
          "req_fields": [],
          "res_type": "PUBLISH",
          "res_fields": [
              "Fixed Header",
              "RETAIN"
          ]
      },
      {
          "rule": "The SUBACK packet must have the same Packet Identifier as the SUBSCRIBE packet it acknowledges.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      },
      {
          "rule": "When the Server receives a SUBSCRIBE packet from a Client, the Server must respond with a SUBACK packet.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Packet Identifier",
              "List of Topic Subscriptions",
              "Topic Filter",
              "Subscription Options"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Packet Identifier",
              "Payload",
              "Reason Code"
          ]
      },
      {
          "rule": "If a Server receives a Non-shared Topic Filter that does not match any existing Topic Filter for the current Session, a new Non-shared Subscription is created.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "subscriptions",
              "subscriptions.topic_filter"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "reason_codes"
          ]
      },
      {
          "rule": "If the Retain Handling option is 0, any existing retained messages matching the Topic Filter must be re-sent, but Application Messages must not be lost due to replacing the Subscription.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Retain Handling",
              "Topic Filter"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a Server receives a Shared Subscription Topic Filter that does not match any existing Shared Subscription's Topic Filter, a new Shared Subscription is created.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Topic Subscription",
              "Topic Filter"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Retain Handling option is not 2, all matching retained messages are sent to the Client.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Retain Handling"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Server is allowed to begin sending PUBLISH packets that match the Subscription before sending the SUBACK packet.",
          "req_type": "SUBSCRIBE",
          "req_fields": [],
          "res_type": "SUBACK",
          "res_fields": []
      },
      {
          "rule": "The Reason Code must indicate the maximum QoS granted for the subscription or signify that the subscription failed.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options",
              "Requested QoS"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "Subscribing to a Topic Filter at QoS 2 means the subscriber will receive messages matching the filter at the QoS level with which they were published.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Topic Filter",
              "Subscription Options"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "Topic Name",
              "QoS"
          ]
      },
      {
          "rule": "The SUBACK packet sent by the Server to the Client must contain a Reason Code for each Topic Filter/Subscription Option pair.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters",
              "Subscription Options"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Payload",
              "Reason Codes"
          ]
      },
      {
          "rule": "If a Server receives a SUBSCRIBE packet containing multiple Topic Filters, the Server MUST handle that packet as if it had received a sequence of multiple SUBSCRIBE packets, except that the Server combines their responses into a single SUBACK response.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Payload",
              "Reason Codes"
          ]
      },
      {
          "rule": "If a subscribing client has been granted maximum QoS 1 for a particular topic filter, then a QoS 0 application message matching the filter is delivered to the client at QoS 0.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "topicFilters",
              "subscriptionOptions"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "qos"
          ]
      },
      {
          "rule": "If a Server receives a SUBSCRIBE packet containing a Topic Filter that is identical to a Non-shared Subscription's Topic Filter for the current Session, the Server must replace that existing Subscription with a new Subscription.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filter"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Reason Codes",
              "Reason Code"
          ]
      },
      {
          "rule": "The wildcard characters can be used in Topic Filters but must not be used within a Topic Name.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "subscriptions",
              "topicFilter",
              "topicName"
          ],
          "res_type": "DISCONNECT",
          "res_fields": [
              "reasonCode"
          ]
      },
      {
          "rule": "The QoS of Application Messages sent in response to a Subscription must be the minimum of the QoS of the originally published message and the Maximum QoS granted by the Server.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "subscriptions",
              "subscriptions.options"
          ],
          "res_type": "PUBLISH",
          "res_fields": [
              "qos"
          ]
      },
      {
          "rule": "The server may send duplicate copies of a message to a subscriber if the original message was published with QoS 1 and the maximum QoS granted was QoS 0.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "Subscription Options"
          ],
          "res_type": "SUBACK",
          "res_fields": [
              "Reason Code"
          ]
      },
      {
          "rule": "A Shared Subscription's Topic Filter must start with 'share/' and must contain a ShareName that is at least one character long.",
          "req_type": "SUBSCRIBE",
          "req_fields": [
              "subscriptions",
              "subscriptions.topicFilter"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
        "rule": "The ShareName must not contain the characters \"/\", \"+\", or \"#\". The ShareName must be followed by a \"/\" character. This \"/\" character must be followed by a Topic Filter as described in section 4.7.",
        "req_type": "SUBSCRIBE",
        "req_fields": ["Topic Filter"],
        "res_type": "",
        "res_fields": []
      }
  ],
  "PUBACK": [
      {
          "rule": "The Client or Server sending the PUBACK packet must use one of the PUBACK Reason Codes.",
          "req_type": "PUBACK",
          "req_fields": [
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      }
  ],
  "PUBREC": [
      {
          "rule": "The PUBREC packet does not include a Payload.",
          "req_type": "PUBREC",
          "req_fields": [
              "Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Client or Server sending the PUBREC packet must use one of the PUBREC Reason Code values.",
          "req_type": "PUBREC",
          "req_fields": [
              "Variable Header",
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Reason Code and Property Length can be omitted if the Reason Code is 0x00 (Success) and there are no Properties.",
          "req_type": "PUBREC",
          "req_fields": [
              "Reason Code",
              "Property Length",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The sender must not include the User Property in the PUBREC packet if doing so would cause the packet size to exceed the Maximum Packet Size specified by the receiver.",
          "req_type": "PUBREC",
          "req_fields": [
              "User Property",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Reason Code is 0x00 (Success) and there are no Properties, the PUBREC packet has a Remaining Length of 2.",
          "req_type": "PUBREC",
          "req_fields": [
              "Variable Header",
              "Reason Code",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The sender MUST send a PUBREL packet upon receiving a PUBREC packet from the receiver with a Reason Code value less than 0x80.",
          "req_type": "PUBREC",
          "req_fields": [
              "Reason Code"
          ],
          "res_type": "PUBREL",
          "res_fields": []
      },
      {
          "rule": "The send quota increases by 1 whenever a PUBREC packet with a Return Code of 0x80 or higher is received.",
          "req_type": "PUBREC",
          "req_fields": [
              "Variable Header",
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      }
  ],
  "PUBREL": [
      {
          "rule": "The Reason Code and Property Length can be omitted if the Reason Code is 0x00 (Success) and there are no Properties.",
          "req_type": "PUBREL",
          "req_fields": [
              "Reason Code",
              "Property Length",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Reason Code is 0x00 (Success) and there are no Properties, the PUBREL packet has a Remaining Length of 2.",
          "req_type": "PUBREL",
          "req_fields": [
              "Fixed Header",
              "Remaining Length",
              "Variable Header",
              "Reason Code",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The sender MUST treat the PUBREL packet as unacknowledged until the sender has received the corresponding PUBCOMP packet from the receiver.",
          "req_type": "PUBREL",
          "req_fields": [
              "Packet Identifier"
          ],
          "res_type": "PUBCOMP",
          "res_fields": [
              "Packet Identifier"
          ]
      },
      {
          "rule": "The server MUST respond to a PUBREL packet by sending a PUBCOMP packet containing the same Packet Identifier as the PUBREL.",
          "req_type": "PUBREL",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "PUBCOMP",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      }
  ],
  "PUBCOMP": [
      {
          "rule": "The sender must not send the Reason String if it would increase the size of the PUBCOMP packet beyond the Maximum Packet Size specified by the receiver.",
          "req_type": "PUBCOMP",
          "req_fields": [
              "Properties",
              "Reason String"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Reason Code and Property Length can be omitted if the Reason Code is 0x00 (Success) and there are no Properties.",
          "req_type": "PUBCOMP",
          "req_fields": [
              "Reason Code",
              "Property Length",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Client or Server sending the PUBCOMP packet must use one of the PUBCOMP Reason Code values.",
          "req_type": "PUBCOMP",
          "req_fields": [
              "Variable Header",
              "Reason Code"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Reason Code is 0x00 (Success) and there are no Properties, the PUBCOMP packet has a Remaining Length of 2.",
          "req_type": "PUBCOMP",
          "req_fields": [
              "Variable Header",
              "Reason Code",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      }
  ],
  "UNSUBSCRIBE": [
      {
          "rule": "The Topic Filters in an UNSUBSCRIBE packet must be UTF-8 encoded strings as defined in section 1.5.4, packed contiguously.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "An UNSUBSCRIBE packet must contain a Payload; otherwise, it is a Protocol Error.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "Each Reason Code corresponds to a Topic Filter in the UNSUBSCRIBE packet being acknowledged.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filter"
          ],
          "res_type": "UNSUBACK",
          "res_fields": [
              "Payload",
              "Reason Code"
          ]
      },
      {
          "rule": "The order of Reason Codes in the UNSUBACK packet must match the order of Topic Filters in the UNSUBSCRIBE packet.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "UNSUBACK",
          "res_fields": [
              "Payload",
              "Reason Codes"
          ]
      },
      {
          "rule": "The Unsubscribe Reason Codes correspond to each Topic Filter in the UNSUBSCRIBE packet.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filter"
          ],
          "res_type": "UNSUBACK",
          "res_fields": [
              "Payload",
              "Reason Code"
          ]
      },
      {
          "rule": "The Server sending an UNSUBACK packet must use one of the Unsubscribe Reason Code values for each Topic Filter received.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "UNSUBACK",
          "res_fields": [
              "Payload",
              "Reason Codes"
          ]
      },
      {
          "rule": "The UNSUBACK packet must have the same Packet Identifier as the UNSUBSCRIBE packet.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Variable Header",
              "Packet Identifier"
          ],
          "res_type": "UNSUBACK",
          "res_fields": [
              "Variable Header",
              "Packet Identifier"
          ]
      },
      {
          "rule": "If a Server receives an UNSUBSCRIBE packet containing multiple Topic Filters, the Server MUST process the packet as if it had received a sequence of multiple UNSUBSCRIBE packets, except that the Server sends only one UNSUBACK response.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "UNSUBACK",
          "res_fields": []
      },
      {
          "rule": "The Topic Filters in an UNSUBSCRIBE packet must be compared character-by-character with the current set of Topic Filters held by the Server for the Client.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "TopicFilters"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If a Topic Filter represents a Shared Subscription, the Session associated with the UNSUBSCRIBE packet is detached from the Shared Subscription.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Payload",
              "Topic Filters"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "If the Session associated with the UNSUBSCRIBE packet was the only Session linked to the Shared Subscription, the Shared Subscription is deleted.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "TopicFilters",
              "Payload",
              "PacketIdentifier",
              "VariableHeader"
          ],
          "res_type": "UNSUBACK",
          "res_fields": [
              "PacketIdentifier",
              "VariableHeader",
              "ReasonCodes",
              "Payload"
          ]
      },
      {
          "rule": "The server must respond with an UNSUBACK even if no topic subscriptions are deleted.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Packet Identifier",
              "Payload",
              "Topic Filters"
          ],
          "res_type": "UNSUBACK",
          "res_fields": []
      },
      {
          "rule": "When a Server receives an UNSUBSCRIBE packet, the Server must stop adding any new messages that match the Topic Filters for delivery to the Client.",
          "req_type": "UNSUBSCRIBE",
          "req_fields": [
              "Topic Filters"
          ],
          "res_type": "",
          "res_fields": []
      }
  ],
  "PINGREQ": [
      {
          "rule": "The Server must send a PINGRESP packet in response to a PINGREQ packet.",
          "req_type": "PINGREQ",
          "req_fields": [],
          "res_type": "PINGRESP",
          "res_fields": []
      },
      {
          "rule": "The PINGREQ packet is used to request that the server responds to confirm that the server is alive.",
          "req_type": "PINGREQ",
          "req_fields": [],
          "res_type": "PINGRESP",
          "res_fields": []
      }
  ],
  "AUTH": [
      {
          "rule": "Bits 3, 2, 1, and 0 of the Fixed Header of the AUTH packet are reserved and must all be set to 0.",
          "req_type": "AUTH",
          "req_fields": [
              "Fixed Header",
              "Flags"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The sender must not include the User Property if it would cause the AUTH packet to exceed the Maximum Packet Size specified by the receiver.",
          "req_type": "AUTH",
          "req_fields": [
              "Properties",
              "User Property"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Reason Code and Property Length can be omitted if the Reason Code is 0x00 (Success) and there are no Properties.",
          "req_type": "AUTH",
          "req_fields": [
              "Reason Code",
              "Property Length",
              "Properties"
          ],
          "res_type": "",
          "res_fields": []
      },
      {
          "rule": "The Server responds to the re-authentication request by sending an AUTH packet to the Client with a Reason Code of 0x00 (Success) to indicate that the re-authentication is complete, or a Reason Code of 0x18 (Continue authentication) to indicate that more authentication data is needed.",
          "req_type": "AUTH",
          "req_fields": [],
          "res_type": "AUTH",
          "res_fields": [
              "Variable Header",
              "Reason Code"
          ]
      }
  ]
}